# dune fmt
# OCAMLPARAM: unset
# Shared cache: disabled
# Workspace root: /home/edo/Projects/99_problems
# Auto-detected concurrency: 4
$ /home/edo/.opam/default/bin/ocamlc.opt -config > /tmp/dune_cc2f90_output
# Dune context:
#  { name = "default"
#  ; kind = "default"
#  ; profile = Dev
#  ; merlin = true
#  ; for_host = None
#  ; fdo_target_exe = None
#  ; build_dir = In_build_dir "default"
#  ; ocaml_bin = External "/home/edo/.opam/default/bin"
#  ; ocaml = Ok External "/home/edo/.opam/default/bin/ocaml"
#  ; ocamlc = External "/home/edo/.opam/default/bin/ocamlc.opt"
#  ; ocamlopt = Ok External "/home/edo/.opam/default/bin/ocamlopt.opt"
#  ; ocamldep = Ok External "/home/edo/.opam/default/bin/ocamldep.opt"
#  ; ocamlmklib = Ok External "/home/edo/.opam/default/bin/ocamlmklib.opt"
#  ; env =
#      map
#        { "DUNE_OCAML_HARDCODED" :
#            "/home/edo/.opam/default/lib/ocaml:/home/edo/.opam/default/lib"
#        ; "DUNE_OCAML_STDLIB" : "/home/edo/.opam/default/lib/ocaml"
#        ; "DUNE_SOURCEROOT" : "/home/edo/Projects/99_problems"
#        ; "INSIDE_DUNE" : "/home/edo/Projects/99_problems/_build/default"
#        ; "OCAMLFIND_IGNORE_DUPS_IN" :
#            "/home/edo/Projects/99_problems/_build/install/default/lib"
#        ; "OCAMLPATH" :
#            "/home/edo/Projects/99_problems/_build/install/default/lib"
#        ; "OCAMLTOP_INCLUDE_PATH" :
#            "/home/edo/Projects/99_problems/_build/install/default/lib/toplevel"
#        ; "OCAML_COLOR" : "always"
#        ; "OPAMCOLOR" : "always"
#        }
#  ; findlib_paths =
#      [ External "/home/edo/.opam/default/lib/ocaml"
#      ; External "/home/edo/.opam/default/lib"
#      ]
#  ; natdynlink_supported = true
#  ; supports_shared_libraries = true
#  ; ocaml_config =
#      { version = "5.0.0"
#      ; standard_library_default = "/home/edo/.opam/default/lib/ocaml"
#      ; standard_library = "/home/edo/.opam/default/lib/ocaml"
#      ; standard_runtime = "the_standard_runtime_variable_was_deleted"
#      ; ccomp_type = "cc"
#      ; c_compiler = "gcc"
#      ; ocamlc_cflags =
#          [ "-O2"; "-fno-strict-aliasing"; "-fwrapv"; "-pthread"; "-fPIC" ]
#      ; ocamlc_cppflags = [ "-D_FILE_OFFSET_BITS=64" ]
#      ; ocamlopt_cflags =
#          [ "-O2"; "-fno-strict-aliasing"; "-fwrapv"; "-pthread"; "-fPIC" ]
#      ; ocamlopt_cppflags = [ "-D_FILE_OFFSET_BITS=64" ]
#      ; bytecomp_c_compiler =
#          [ "gcc"
#          ; "-O2"
#          ; "-fno-strict-aliasing"
#          ; "-fwrapv"
#          ; "-pthread"
#          ; "-fPIC"
#          ; "-D_FILE_OFFSET_BITS=64"
#          ]
#      ; bytecomp_c_libraries = [ "-lm"; "-lpthread" ]
#      ; native_c_compiler =
#          [ "gcc"
#          ; "-O2"
#          ; "-fno-strict-aliasing"
#          ; "-fwrapv"
#          ; "-pthread"
#          ; "-fPIC"
#          ; "-D_FILE_OFFSET_BITS=64"
#          ]
#      ; native_c_libraries = [ "-lm"; "-lpthread" ]
#      ; native_pack_linker = [ "ld"; "-r"; "-o" ]
#      ; cc_profile = []
#      ; architecture = "amd64"
#      ; model = "default"
#      ; int_size = 63
#      ; word_size = 64
#      ; system = "linux"
#      ; asm = [ "as" ]
#      ; asm_cfi_supported = true
#      ; with_frame_pointers = false
#      ; ext_exe = ""
#      ; ext_obj = ".o"
#      ; ext_asm = ".s"
#      ; ext_lib = ".a"
#      ; ext_dll = ".so"
#      ; os_type = "Unix"
#      ; default_executable_name = "a.out"
#      ; systhread_supported = true
#      ; host = "x86_64-pc-linux-gnu"
#      ; target = "x86_64-pc-linux-gnu"
#      ; profiling = false
#      ; flambda = false
#      ; spacetime = false
#      ; safe_string = true
#      ; exec_magic_number = "Caml1999X032"
#      ; cmi_magic_number = "Caml1999I032"
#      ; cmo_magic_number = "Caml1999O032"
#      ; cma_magic_number = "Caml1999A032"
#      ; cmx_magic_number = "Caml1999Y032"
#      ; cmxa_magic_number = "Caml1999Z032"
#      ; ast_impl_magic_number = "Caml1999M032"
#      ; ast_intf_magic_number = "Caml1999N032"
#      ; cmxs_magic_number = "Caml1999D032"
#      ; cmt_magic_number = "Caml1999T032"
#      ; natdynlink_supported = true
#      ; supports_shared_libraries = true
#      ; windows_unicode = false
#      }
#  }
$ (cd _build/default && /home/edo/.opam/default/bin/ocamlformat --impl bin/main.ml) > _build/default/bin/.formatted/main.ml
$ /usr/bin/git --no-pager diff --no-index --color=always -u _build/default/bin/main.ml _build/default/bin/.formatted/main.ml
> diff --git a/_build/default/bin/main.ml b/_build/default/bin/.formatted/main.ml
> index 9c8692f..b3536a6 100644
> --- a/_build/default/bin/main.ml
> +++ b/_build/default/bin/.formatted/main.ml
> @@ -317,9 +317,9 @@ let phi_improved n =
>    let rec pow a = function
>      | 0 -> 1
>      | 1 -> a
> -    | n -> n * (pow a (n - 1))
> +    | n -> n * pow a (n - 1)
>    in
> -  List.fold_left (fun acc (p, m) -> acc * (p - 1) * (pow p (m - 1))) 1 (factors_enc n)
> +  List.fold_left (fun acc (p, m) -> acc * (p - 1) * pow p (m - 1)) 1 (factors_enc n)
>  ;;
>  
>  (* Problem 38 *)
> @@ -393,37 +393,40 @@ let table vars expr = List.map (fun ctx -> ctx, eval_expr ctx expr) @@ gen_ctxs
>  
>  (* Problem 49 *)
>  let gray n =
> -    let rec gray_next_level k l =
> -        if k < n then
> -            let (first_half, second_half) =
> -                List.fold_left (fun (acc1, acc2) x -> (("0" ^ x)::acc1, ("1" ^ x)::acc2)) ([], []) l
> -            in
> -            gray_next_level (k+1) (List.rev_append first_half second_half)
> -        else l
> -    in
> -    gray_next_level 1 ["0"; "1"]
> +  let rec gray_next_level k l =
> +    if k < n
> +    then (
> +      let first_half, second_half =
> +        List.fold_left
> +          (fun (acc1, acc2) x -> ("0" ^ x) :: acc1, ("1" ^ x) :: acc2)
> +          ([], [])
> +          l
> +      in
> +      gray_next_level (k + 1) (List.rev_append first_half second_half))
> +    else l
> +  in
> +  gray_next_level 1 [ "0"; "1" ]
>  ;;
>  
>  (* Problem 50 *)
>  type hf_tree =
> -    | Node of hf_tree * hf_tree
> -    | Leaf of string
> -;;
> +  | Node of hf_tree * hf_tree
> +  | Leaf of string
>  
>  let huffman fs =
> -    let fsts = List.map (fun (s, f) -> (Leaf s, f)) fs in
> -    let rec construct_tree fst =
> -        let fsts' = sort (fun (_, f1) (_, f2) -> compare f1 f2) fst in
> -        match fsts' with
> -        | [] -> raise (Failure "Cannot construct Huffman tree")
> -        | [(fst, _)] -> fst
> -        | (t1, f1)::(t2, f2)::t -> construct_tree @@ (Node (t1, t2), f1 + f2)::t
> -    in
> -    let rec decode_tree acc = function
> -        | Node (t1, t2) -> decode_tree (acc ^ "0") t1 @ decode_tree (acc ^ "1") t2
> -        | Leaf s -> [(s, acc)]
> -    in
> -        decode_tree "" @@ construct_tree fsts
> +  let fsts = List.map (fun (s, f) -> Leaf s, f) fs in
> +  let rec construct_tree fst =
> +    let fsts' = sort (fun (_, f1) (_, f2) -> compare f1 f2) fst in
> +    match fsts' with
> +    | [] -> raise (Failure "Cannot construct Huffman tree")
> +    | [ (fst, _) ] -> fst
> +    | (t1, f1) :: (t2, f2) :: t -> construct_tree @@ ((Node (t1, t2), f1 + f2) :: t)
> +  in
> +  let rec decode_tree acc = function
> +    | Node (t1, t2) -> decode_tree (acc ^ "0") t1 @ decode_tree (acc ^ "1") t2
> +    | Leaf s -> [ s, acc ]
> +  in
> +  decode_tree "" @@ construct_tree fsts
>  ;;
>  
>  (* TESTING *)
> @@ -649,11 +652,13 @@ let () =
>          ; [ "a", false; "b", false ], false
>          ])
>    in
> -  let _ = assert (gray 1 = ["0"; "1"]) in
> -  let _ = assert (gray 2 = ["00"; "01"; "11"; "10"]) in
> -  let _ = assert (gray 3 = ["000"; "001"; "011"; "010"; "110"; "111"; "101"; "100"]) in
> -  let _ = assert (huffman [("a", 45); ("b", 13); ("c", 12); ("d", 16);
> -          ("e", 9); ("f", 5)] = [("a", "0"); ("c", "100"); ("b", "101"); ("f", "1100"); ("e", "1101");
> - ("d", "111")]) in
> +  let _ = assert (gray 1 = [ "0"; "1" ]) in
> +  let _ = assert (gray 2 = [ "00"; "01"; "11"; "10" ]) in
> +  let _ = assert (gray 3 = [ "000"; "001"; "011"; "010"; "110"; "111"; "101"; "100" ]) in
> +  let _ =
> +    assert (
> +      huffman [ "a", 45; "b", 13; "c", 12; "d", 16; "e", 9; "f", 5 ]
> +      = [ "a", "0"; "c", "100"; "b", "101"; "f", "1100"; "e", "1101"; "d", "111" ])
> +  in
>    ()
>  ;;
[1]
